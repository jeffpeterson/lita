class Nil < Any
	fn string = ""

class Object < Any

// class Bytes(str)
// class Inspect(String)
// class Literal(String)
// class Point(x, y)

class Function
class Method < Function
class NativeFunction < Function
class Class < Function

class Bool
	fn inspect = this ? 'true : 'false
	fn string = inspect

class Error
class Number

class Range(start, end)
	fn inspect = start.inspect + ".." + end.inspect
	fn string  = start.string + ".." + end.string

class Table
	fn inspect = "{" + "}"

class Atom(type, value, targets) // ...targets)
