let scanner

fn reset_scanner
	scanner = Scanner(scanner.source)

class Token(type, escaped, source, line)
	let type
	let escaped
	let source
	let line

class Indent
	let previous = 0
	let current = 0
	let inside = true

class Scanner
	let source				// Current source string.
	let position = 0..0		// Current position in the source.
	let line = 1			// Current line number.
	let indent = Indent()	// Indent status.
	let data				// __DATA__ buffer.

	.init(input)
		source = input
		skip_shebang
		skip_whitespace

	.current	= source[span.end]
	.is_at_end	= position.start + position.end >= source.length

fn isAlpha(c)		= c.in ('a..'z) or c.in 'A..'Z or c == '_'
fn isDigit(c)		= c.in '0..'9
fn isSubscript(c)	= c.in 0x2080..0x2089

// fn utf_bytes(str)
// 	if str 0 < 0x80: return str 0 ? 1 : 0
// 	if str 1 < 0x80: return 0
// 	if str 0 < 0xE0: return 2
// 	if str 2 < 0x80: return 0
// 	if str 0 < 0xF0: return 3
// 	if str 3 < 0xF0: return 0
// 	return 4

// fn code_point(str)
// 	match utfBytes(str)
// 		1 -> return str 0
// 		2 -> return ((str 0 & 0x1F) << 6) | (str 1 & 0x3F)
// 		3 -> return ((str 0 & 0x0F) << 12) | ((str 1 & 0x3F) << 6) | (str 2 & 0x3F)
// 		4 ->
// 			return ((str 0 & 0x07) << 18) | ((str 1 & 0x3F) << 12) |
// 						((str 2 & 0x3F) << 6) | (str 3 & 0x3F)
// 		else return 0
