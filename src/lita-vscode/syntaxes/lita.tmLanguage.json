{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "lita",
  "scopeName": "source.lita",
  "patterns": [
    {"include": "#comments"},
    {"include": "#keywords"},
    {"include": "#statements"},
    {"include": "#callables"},
    {"include": "#ident"},
    {"include": "#embeds"},
    {"include": "#strings"},
    {"include": "#digits"}
  ],
  "repository": {
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.lita",
          "match": "\\b(and|atom|else|for|if|in|macro|match|or|proc|return|while)\\b"
        },
        {
          "name": "keyword.operator.lita",
          "match": "->|=>|<-|==|="
        },
        {
          "name": "keyword.operator.logical.lita",
          "match": "[+\\-*%&!@#^?/:;,.]+"
        },
        {
          "name": "constant.language.null.lita",
          "match": "\\b(nil)\\b"
        },
        {
          "name": "constant.language.boolean.lita",
          "match": "\\b(true|false)\\b"
        },
        {
          "name": "support.function.builtin.lita",
          "match": "\\b(print|assert|clock|read|write)\\b"
        },
        {
          "name": "variable.language.this.lita",
          "match": "\\b(this|self)\\b"
        },
        {
          "name": "variable.language.super.lita",
          "match": "\\b(super)\\b"
        },
        {
          "begin": "^__END__\\n",
          "captures": {
            "0": {"name": "string.unquoted.program-block.lita"}
          },
          "comment": "__END__ marker",
          "contentName": "text.plain",
          "end": "(?=not)impossible",
          "patterns": [
            {
              "begin": "(?=<?xml|<(?i:html\\b)|!DOCTYPE (?i:html\\b))",
              "end": "(?=not)impossible",
              "name": "text.html.embedded.lita",
              "patterns": [{"include": "text.html.basic"}]
            }
          ]
        }
      ]
    },
    "statements": {
      "patterns": [
        {
          "match": "\\b(let)\\s+([A-Za-z_][A-Za-z0-9_]*)\\b",
          "captures": {
            "1": {"name": "storage.type.lita"},
            "2": {"name": "support.variable.lita"}
          }
        },
        {
          "match": "\\b(fn)\\s+([^\\(\\s]*)\\s*(?:\\(([A-Za-z0-9,\\s]*)\\))?\\s*(=>?)?",
          "captures": {
            "1": {"name": "storage.type.function.lita"},
            "2": {"name": "entity.name.function.lita"},
            "3": {
              "patterns": [
                {
                  "match": "\\b[A-Za-z_][A-Za-z0-9_]*\\b",
                  "name": "variable.parameter.lita"
                }
              ]
            },
            "4": {"name": "storage.modifier.lita"}
          }
        },
        {
          "match": "\\b(class)\\s+([A-Za-z_][A-Za-z0-9_]*)(?:\\s*(<)\\s*([A-Za-z_][A-Za-z0-9_]*))?\\b",
          "captures": {
            "1": {"name": "storage.type.class.lita"},
            "2": {"name": "entity.name.type.class.lita"},
            "3": {"name": "storage.modifier.lita"},
            "4": {"name": "entity.name.type.class.lita"}
          }
        }
      ]
    },
    "callables": {
      "patterns": [
        {
          "match": "([A-Za-z_][A-Za-z0-9_]*)\\(",
          "name": "support.function.lita"
        },
        {
          "match": "([A-Za-z_][A-Za-z0-9_]*)\\s*=>",
          "captures": {
            "1": {"name": "support.function.lita"}
          }
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double.lita",
          "begin": "'?\"",
          "end": "\"",
          "patterns": [
            {
              "match": "\\\\[0tnr\"'\\\\]",
              "name": "constant.character.escape.lita"
            }
          ]
        },
        {
          "name": "string.quoted.single.lita",
          "match": "'(\\.\\.|[^\\s][^\\s;,)\\]}.]*)"
        }
      ]
    },
    "digits": {
      "patterns": [
        {
          "name": "constant.numeric.lita",
          "match": "\\b[0-9]+(?:.[0-9]+)?"
        }
      ]
    },
    "ident": {
      "patterns": [
        {
          "name": "entity.name.class.lita",
          "match": "[A-Z][A-Za-z0-9_]*\\b"
        },
        {
          "name": "variable.other.readwrite.lita",
          "match": "[A-Za-z_][A-Za-z0-9_]*\\b"
        }
      ]
    },
    "embeds": {
      "patterns": [
        {
          "begin": "^(\\s*)(cfn .*)$",
          "end": "^(?!\\1\\s+|\\n)",
          "name": "meta.embedded.c",
          "captures": {
            "2": {
              "name": "entity.name.function.lita"
            }
          },
          "patterns": [{"include": "source.c"}]
        }
      ]
    },
    "comments": {
      "patterns": [
        {
          "name": "comment.line.double-slash.lita",
          "match": "\\/\\/.*",
          "patterns": [{"include": "source.markdown"}]
        }
      ]
    }
  }
}
