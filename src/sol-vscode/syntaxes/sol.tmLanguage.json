{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "sol",
  "scopeName": "source.sol",
  "patterns": [
    { "include": "#comments" },
    { "include": "#keywords" },
    { "include": "#statements" },
    { "include": "#callables" },
    { "include": "#ident" },
    { "include": "#strings" },
    { "include": "#digits" }
  ],
  "repository": {
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.sol",
          "match": "\\b(and|atom|else|for|if|in|macro|match|or|proc|return|while)\\b"
        },
        {
          "name": "keyword.operator.sol",
          "match": "->|=>|<-|==|="
        },
        {
          "name": "keyword.operator.logical.sol",
          "match": "[+\\-*%&!@#^?/:;,.]+"
        },
        {
          "name": "constant.language.null.sol",
          "match": "\\b(nil)\\b"
        },
        {
          "name": "constant.language.boolean.sol",
          "match": "\\b(true|false)\\b"
        },
        {
          "name": "support.function.builtin.sol",
          "match": "\\b(print|assert|clock|read|write)\\b"
        },
        {
          "name": "variable.language.this.sol",
          "match": "\\b(this|self)\\b"
        },
        {
          "name": "variable.language.super.sol",
          "match": "\\b(super)\\b"
        },
        {
          "begin": "^__END__\\n",
          "captures": {
            "0": { "name": "string.unquoted.program-block.sol" }
          },
          "comment": "__END__ marker",
          "contentName": "text.plain",
          "end": "(?=not)impossible",
          "patterns": [
            {
              "begin": "(?=<?xml|<(?i:html\\b)|!DOCTYPE (?i:html\\b))",
              "end": "(?=not)impossible",
              "name": "text.html.embedded.sol",
              "patterns": [{ "include": "text.html.basic" }]
            }
          ]
        }
      ]
    },
    "statements": {
      "patterns": [
        {
          "match": "\\b(let)\\s+([A-Za-z_][A-Za-z0-9_]*)\\b",
          "captures": {
            "1": { "name": "storage.type.sol" },
            "2": { "name": "support.variable.sol" }
          }
        },
        {
          "match": "\\b(fn)\\s+([^\\(\\s]*)\\s*(?:\\(([A-Za-z0-9,\\s]*)\\))?\\s*(=>?)?",
          "captures": {
            "1": { "name": "storage.type.function.sol" },
            "2": { "name": "entity.name.function.sol" },
            "3": {
              "patterns": [
                {
                  "match": "\\b[A-Za-z_][A-Za-z0-9_]*\\b",
                  "name": "variable.parameter.sol"
                }
              ]
            },
            "4": { "name": "storage.modifier.sol" }
          }
        },
        {
          "match": "\\b(class)\\s+([A-Za-z_][A-Za-z0-9_]*)(?:\\s*(<)\\s*([A-Za-z_][A-Za-z0-9_]*))?\\b",
          "captures": {
            "1": { "name": "storage.type.class.sol" },
            "2": { "name": "entity.name.type.class.sol" },
            "3": { "name": "storage.modifier.sol" },
            "4": { "name": "entity.name.type.class.sol" }
          }
        }
      ]
    },
    "callables": {
      "patterns": [
        {
          "match": "([A-Za-z_][A-Za-z0-9_]*)\\(",
          "name": "support.function.sol"
        },
        {
          "match": "([A-Za-z_][A-Za-z0-9_]*)\\s*=>",
          "captures": {
            "1": { "name": "support.function.sol" }
          }
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double.sol",
          "begin": "'?\"",
          "end": "\"",
          "patterns": [
            {
              "match": "\\\\[0tnr\"'\\\\]",
              "name": "constant.character.escape.sol"
            }
          ]
        },
        {
          "name": "string.quoted.single.sol",
          "match": "'[^\\s][^\\s;,)\\]}.]*"
        }
      ]
    },
    "digits": {
      "patterns": [
        {
          "name": "constant.numeric.sol",
          "match": "\\b[0-9]+(?:.[0-9]+)?\\b"
        }
      ]
    },
    "ident": {
      "patterns": [
        {
          "name": "entity.name.class.sol",
          "match": "\\b[A-Z][A-Za-z0-9_]*\\b"
        },
        {
          "name": "variable.other.readwrite.sol",
          "match": "\\b[A-Za-z_][A-Za-z0-9_]*\\b"
        }
      ]
    },
    "comments": {
      "patterns": [
        {
          "match": "\\/\\/\\/(.*)",
          "captures": {
            "0": { "name": "comment.line.double-slash.sol" },
            "1": { "name": "keyword.control.directive.line.sol" }
          }
        },
        {
          "name": "comment.line.double-slash.sol",
          "match": "\\/\\/.*"
        }
      ]
    }
  }
}
